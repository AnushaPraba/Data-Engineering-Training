MongoDB Schema & Relationships Exercise Set
Section 1: Working with Schemas & Data Types

1.Create a database named trainingdb 
use trainingdb

2.Create a collection employees with documents that include:
name (string)
age (number)
isManager (boolean)
skills (array of strings)
joiningDate (date)
profile (sub-document with linkedin and portfolio )
db.createCollection("employees")

3.Insert 4 employees with varying skill sets and joining dates
db.employees.insertMany([
{name:'Kamal Hassan',
age:40,
isManager:true,
skills:['Python','AWS','MongoDB'],
joiningDate:new Date('2019-11-25'),
profile:{
linkedin:'https://linkedin.com/in/kamal',
portfolio:'https://kamal.dev'}},
{name:'Surya',
age:35,
isManager:'false',
skills:['Java','JavaScript','Spring'],
joiningDate:new Date('2021-09-11'),
profile:{
linkedin:'https://linkedin.com/in/surya',
portfolio:'https://surya.dev'}},
{name:'Dhanush Raja',
age:30,
isManager:false,
skills:['React','Node.js'],
joiningDate:new Date('2023-06-20'),
profile:{
linkedin:'https://linkedin.com/in/dhanush',
portfolio:'https://dhanush.dev'}},
{name:'Kathir',
age:25,
isManager:false,
skills:['Python','Django'],
joiningDate:new Date('2024-10-26'),
profile:{
linkedin:'https://linkedin.com/in/kathir',
portfolio:'https://kathir.dev'}}])

4.Query all employees who: Have more than 2 skills and joined after a specific date
db.employees.find({$and:[
{'skills.2':{$exists:true}},
{joiningDate:{$gt:new Date('2021-01-01')}}]})

5.Add a new field rating (float) to one employee 
db.employees.updateOne({name:'Surya'},{$set:{rating:4.9}})

6.Find all employees with rating field of type double.
db.employees.find({rating:{$type:'double'}})

7.Exclude the _id field in a query result and show only name and skills.
db.employees.find({},{_id:0,name:1,skills:1})

-------------------------------------------------------------------------------------------

Section 2: One-to-One (Embedded)
1.Create a database schooldb 
use schooldb

2.In the students collection, insert 3 student documents with: Embedded guardian sub-document ( name , phone , relation )
db.createCollection('students')

db.students.insertMany([
{name:'Agnus Simon',
rollno:101,
age:21,
dob:new Date('2004-02-04'),
guardian:{
name:'Evangeline',
phone:9567859402,
relation:'Mother'}},
{name:'Alwin Wason',
rollno:104,
age:21,
dob:new Date('2003-06-20'),
guardian:{
name:'Franklin Wason',
phone:9586754323,
relation:'Father'}},
{name:'Varsha Dhinakaran',
rollno:108,
age:21,
dob:new Date('2004-02-28'),
guardian:{
name:'Priya',
phone:8976844590,
relation:'Mother'}}])

3.Query students where the guardian is their "Mother"
db.students.find({'guardian.relation':'Mother'})

4.Update the guardian's phone number for a specific student
db.students.updateOne({name:'Agnus Simon'},{$set:{'guardian.phone':8796897689}})

-------------------------------------------------------------------------------------------

Section 3: One-to-Many (Embedded)

1.In the same schooldb , create a teachers collection
db.createCollection('teachers')

2.Insert documents where each teacher has an embedded array of classes they teach (e.g.,["Math", "Physics"] )
db.teachers.insertMany([
{name: 'Viji',
subject: 'Science',
classes: ['Biology', 'Physics']},
{name: 'Arjun',
subject: 'Mathematics',
classes: ['Math', 'Statistics']},
{name: 'Meena',
subject: 'Science',
classes: ['Computer Science', 'Physics']}])

3.Query teachers who teach "Physics".
db.teachers.find({classes:'Physics'})

4.Add a new class "Robotics" to a specific teacher's classes array
db.teachers.updateOne({name:'Meena'},{$addToSet:{classes:'Robotics'
}})

5.Remove "Math" from one teacherâ€™s class list
db.teachers.updateOne({name:'Arjun'},{$pull:{classes:'Math'}})

-------------------------------------------------------------------------------------------

Section 4: One-to-Many (Referenced)
1.Create a database academia.
use academia 

2.Insert documents into courses with fields:
_id
title
credits
db.createCollection('courses')
db.courses.insertMany([
{_id:ObjectId('6831f291621e3599506c4bd0'),
title:'Artificial Intelligence',
credits:4},
{_id:ObjectId('6831f291621e3599506c4bd1'),
title:'Natural Language Processing',
credits:3},
{_id:ObjectId('6831f291621e3599506c4bd2'),
title:'Basics of Data Science',
credits:4}])

3.Insert documents into students with fields:name,enrolledCourse (store ObjectId reference to a course).
db.createCollection('students')
db.students.insertMany([
{name:'Manikandan',
enrolledCourse:ObjectId('6831f291621e3599506c4bd0')},
{name:'Kaviya',
enrolledCourse:ObjectId('6831f291621e3599506c4bd1')},
{name:'Nila',
enrolledCourse:ObjectId('6831f291621e3599506c4bd2')}])

4.Query students who are enrolled in a specific course (by ObjectId ).
db.students.find({enrolledCourse:ObjectId('6831f291621e3599506c4bd1')})

5.Query the course details separately using the referenced _id.
db.courses.find({_id:ObjectId('6831f291621e3599506c4bd2')})

-------------------------------------------------------------------------------------------

Section 5: $lookup (Join in Aggregation)
1.Use the academia database 
use academia

2.Use $lookup to join students with courses based on enrolledCourse.
db.students.aggregate([
{$lookup:{
from:'courses',
localField:'enrolledCourse',
foreignField:'_id',
as:'courseDetails'}}])

3.Show only student name , and course title in the output using $project
db.students.aggregate([
{$lookup:{
from:'courses',
localField:'enrolledCourse',
foreignField:'_id',
as:'courseDetails'}},
{$project:{_id:0,name:1,'courseDetails.title':1}}])

4.Add a $match after $lookup to get only students enrolled in "Machine Learning"
course.
db.students.aggregate([
{$lookup:{
from:'courses',
localField:'enrolledCourse',
foreignField:'_id',
as:'courseDetails'}},
{$match:{'courseDetails.title':'Machine Learning'}},
{$project:{_id:0,name:1,'courseDetails.title':1}}])

-------------------------------------------------------------------------------------------
